---
interface Props {
  class?: string
}

const { class: className } = Astro.props
---

<div class={`prose max-w-none ${className || ''}`}>
  <slot />
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const content = document.querySelector('.prose')
    if (!content) return
    
    const images = content.querySelectorAll('img')
    
    images.forEach((img) => {
      if (img instanceof HTMLImageElement) {
        // Thêm class và data attribute cho lightbox
        img.classList.add('cursor-pointer', 'transition-transform', 'hover:scale-105')
        img.setAttribute('data-lightbox', 'true')
        
        // Thêm style cho ảnh
        img.style.borderRadius = '0.5rem'
        img.style.boxShadow = '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
        
        // Thêm event listener
        img.addEventListener('click', () => {
          // Tạo overlay
          const overlay = document.createElement('div')
          overlay.className = 'lightbox-overlay'
          overlay.innerHTML = `
            <div class="lightbox-content">
              <img src="${img.src}" alt="${img.alt}" class="lightbox-image" />
              <button class="lightbox-close">&times;</button>
            </div>
          `
          
          // Thêm styles nếu chưa có
          if (!document.querySelector('#lightbox-styles')) {
            const style = document.createElement('style')
            style.id = 'lightbox-styles'
            style.textContent = `
              .lightbox-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.9);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 9999;
                cursor: pointer;
              }
              
              .lightbox-content {
                position: relative;
                max-width: 90vw;
                max-height: 90vh;
              }
              
              .lightbox-image {
                max-width: 100%;
                max-height: 100%;
                object-fit: contain;
                border-radius: 0.5rem;
              }
              
              .lightbox-close {
                position: absolute;
                top: -40px;
                right: 0;
                background: none;
                border: none;
                color: white;
                font-size: 2rem;
                cursor: pointer;
                padding: 0;
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
              }
              
              .lightbox-close:hover {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 50%;
              }
            `
            document.head.appendChild(style)
          }
          
          document.body.appendChild(overlay)
          
          // Đóng lightbox khi click
          const closeLightbox = () => {
            document.body.removeChild(overlay)
          }
          
          overlay.addEventListener('click', (e) => {
            if (e.target === overlay) {
              closeLightbox()
            }
          })
          
          const closeButton = overlay.querySelector('.lightbox-close')
          if (closeButton) {
            closeButton.addEventListener('click', closeLightbox)
          }
          
          // Đóng bằng ESC
          const handleEsc = (e: KeyboardEvent) => {
            if (e.key === 'Escape') {
              closeLightbox()
              document.removeEventListener('keydown', handleEsc)
            }
          }
          document.addEventListener('keydown', handleEsc)
        })
      }
    })
  })
</script>


